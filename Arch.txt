Архитектура



1. Ассемблер
	a. Считывает текст из файла исходного кода
		a.1. Создает структуру Text data --------------------------------------------get_text_from_file
	
	b. Разбивает текст на строковые команды с аргументами
		b.1. Создает массив из Text commands на основе Text data --------------------get_tcom
	
	c. Переводит строковые команды в машинные коды, проверяя их корректность
    	c.1. Формирует структуры команд на основе текстовых команд ------------------get_mcodes_from_tcom
		c.2. В процессе формирует листинг компиляции ?(по ключу командной строки) ---get_listing_string    !
    
    e. Записывает команды в исполняемый файл в бинарном режиме ----------------------write_mcodes          ?


2. Дизассемблер
	a. Считывает данные из исполняемого файла в бинарном режиме
    	a.1. Формирует структуры команд на основе бинарного файла -------------------read_mcodes           !!
    
    b. Преобразует машинные коды в команды ------------------------------------------get_tcom_from_mcodes
   		b.1. В процессе формирует листинг декомпиляции ?(по ключу командной строки) -get_listing_string    !
   	
    c. Записывает текстовые команды в файл ------------------------------------------write_text_to_file


3. Процессор
	a. Читает текст из исполняемого файла
    	a.1. Формирует структуры команд на основе бинарного файла -------------------read_mcodes           !!
    
    b. Выполняет каждую команду -----------------------------------------------------execute_commands
		c.1. В процессе формирует лог выполнения ?(по ключу командной строки) -------get_log_string        !
			 (лог выполнения формируется как строка листинга + состояние стека)



Структура команды
										 argc
[ {  2 |    6    } {                  32                   | ... } ]
[ {argc|   cmd   } {                 arg                   | ... } ]
[ {  signature   } {                      argv                   } ]
[                             BinCommand                              ]

